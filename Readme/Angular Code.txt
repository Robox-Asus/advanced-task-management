// This file represents the overall structure and key files for an Angular 19 application.
// Due to the extensive nature of a full Angular project, this provides a representative
// set of files focusing on authentication, API interaction, routing, and basic UI.
// You will need to create these files and folders within your Angular CLI generated project.

// --- 1. Angular Project Setup ---
// First, ensure you have Node.js and Angular CLI installed.
// Then, create a new Angular project:
// ng new task-management-ui --routing --style=scss --no-standalone
// cd task-management-ui

// Install npm install boostrap for ui designing

// --- 2. Environment Configuration (src/environments/environment.ts) ---
// This file holds configuration specific to your environment.
// Update the apiUrl to match your .NET Core API's address.

// src/environments/environment.ts
export const environment = {
  production: false,
  apiUrl: 'https://localhost:5001/api', // Replace with your .NET Core API URL
};

// src/environments/environment.prod.ts
export const environment = {
  production: true,
  apiUrl: 'https://your-production-api-url.com/api', // Replace with your production API URL
};

// --- 3. Core Modules (src/app/app.module.ts) ---
// The root module of your Angular application.
// It declares components, imports other modules, and provides services.

// src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './auth/login/login.component';
import { RegisterComponent } from './auth/register/register.component';
import { AuthInterceptor } from './core/interceptors/auth.interceptor';
import { DashboardComponent } from './features/dashboard/dashboard.component';
import { ProjectListComponent } from './features/projects/project-list/project-list.component';
import { ProjectDetailComponent } from './features/projects/project-detail/project-detail.component';
import { TaskListComponent } from './features/tasks/task-list/task-list.component';
import { TaskDetailComponent } from './features/tasks/task-detail/task-detail.component';
import { NavBarComponent } from './shared/components/nav-bar/nav-bar.component';
import { ReportComponent } from './features/reports/report.component'; // New report component

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    RegisterComponent,
    DashboardComponent,
    ProjectListComponent,
    ProjectDetailComponent,
    TaskListComponent,
    TaskDetailComponent,
    NavBarComponent,
    ReportComponent,
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule,
    // Add Angular Material modules here if you choose to use it, e.g.,
    // MatToolbarModule, MatButtonModule, MatCardModule, MatInputModule, MatFormFieldModule, MatIconModule
  ],
  providers: [
    // Provide the AuthInterceptor to automatically add JWT to requests
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }


// --- 4. Routing (src/app/app-routing.module.ts) ---
// Defines the navigation paths and associates them with components and guards.

// src/app/app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './auth/login/login.component';
import { RegisterComponent } from './auth/register/register.component';
import { DashboardComponent } from './features/dashboard/dashboard.component';
import { AuthGuard } from './core/guards/auth.guard';
import { RoleGuard } from './core/guards/role.guard';
import { ProjectListComponent } from './features/projects/project-list/project-list.component';
import { ProjectDetailComponent } from './features/projects/project-detail/project-detail.component';
import { TaskDetailComponent } from './features/tasks/task-detail/task-detail.component';
import { ReportComponent } from './features/reports/report.component';

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },
  {
    path: 'projects',
    component: ProjectListComponent,
    canActivate: [AuthGuard, RoleGuard],
    data: { roles: ['Admin', 'ProjectManager', 'TeamMember'] }
  },
  {
    path: 'projects/:id',
    component: ProjectDetailComponent,
    canActivate: [AuthGuard, RoleGuard],
    data: { roles: ['Admin', 'ProjectManager', 'TeamMember'] }
  },
  {
    path: 'tasks/:id',
    component: TaskDetailComponent,
    canActivate: [AuthGuard, RoleGuard],
    data: { roles: ['Admin', 'ProjectManager', 'TeamMember'] }
  },
  {
    path: 'reports',
    component: ReportComponent,
    canActivate: [AuthGuard, RoleGuard],
    data: { roles: ['Admin', 'ProjectManager'] } // Only PMs and Admins can view reports
  },
  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
  { path: '**', redirectTo: '/dashboard' } // Wildcard route for any unmatched URL
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


// --- 5. Models/Interfaces (src/app/shared/models) ---
// Define TypeScript interfaces for your DTOs to ensure type safety.

// src/app/shared/models/auth.models.ts
export interface LoginResponse {
  token: string;
}

export interface RegisterRequest {
  email: string;
  password: string;
  confirmPassword: string;
  firstName: string;
  lastName: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

// src/app/shared/models/project.models.ts
export interface Project {
  id: number;
  name: string;
  description: string;
  createdDate: Date;
  dueDate?: Date;
  projectManagerId?: string;
  projectManagerName?: string;
  tasks?: Task[]; // Nested tasks for detail view
  teamMembers?: User[]; // Nested team members for detail view
}

export interface CreateProject {
  name: string;
  description: string;
  dueDate?: Date;
  projectManagerId?: string;
}

export interface UpdateProject {
  name: string;
  description: string;
  dueDate?: Date;
  projectManagerId?: string;
}

export interface AddTeamMember {
  userId: string;
}

// src/app/shared/models/task.models.ts
export interface Task {
  id: number;
  title: string;
  description: string;
  status: 'ToDo' | 'InProgress' | 'Done' | 'Blocked';
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  createdDate: Date;
  dueDate?: Date;
  projectId: number;
  projectName: string;
  assignedToId?: string;
  assignedToName?: string;
  comments?: TaskComment[]; // Nested comments for detail view
}

export interface CreateTask {
  title: string;
  description: string;
  status: 'ToDo' | 'InProgress' | 'Done' | 'Blocked';
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  dueDate?: Date;
  projectId: number;
  assignedToId?: string;
}

export interface UpdateTask {
  title: string;
  description: string;
  status: 'ToDo' | 'InProgress' | 'Done' | 'Blocked';
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  dueDate?: Date;
  assignedToId?: string;
}

export interface TaskComment {
  id: number;
  content: string;
  createdDate: Date;
  userId: string;
  userName: string;
}

export interface AddTaskComment {
  content: string;
}

// src/app/shared/models/user.models.ts
export interface User {
  id: string;
  email: string;
  firstName?: string;
  lastName?: string;
  roles: string[]; // Roles array
}

// src/app/shared/models/report.models.ts
export interface ProjectPerformanceReport {
  projectId: number;
  projectName: string;
  totalTasks: number;
  completedTasks: number;
  inProgressTasks: number;
  overdueTasks: number;
  completionRate: number;
  taskDistributionByAssignee: TaskAssigneeDistribution[];
}

export interface TaskAssigneeDistribution {
  assigneeName: string;
  taskCount: number;
  completedTaskCount: number;
}

export interface BatchUpdateTaskStatus {
  taskIds: number[];
  newStatus: 'ToDo' | 'InProgress' | 'Done' | 'Blocked';
}

// --- 6. Services ---

// --- 6.1. Authentication Service (src/app/core/services/auth.service.ts) ---
// Handles user login, registration, token management, and user state.

// src/app/core/services/auth.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject, map } from 'rxjs';
import { environment } from 'src/environments/environment';
import { JwtHelperService } from '@auth0/angular-jwt'; // npm install @auth0/angular-jwt
import { LoginRequest, LoginResponse, RegisterRequest, User } from 'src/app/shared/models/auth.models';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = environment.apiUrl + '/Auth';
  private jwtHelper: JwtHelperService = new JwtHelperService();

  // BehaviorSubject to hold the current user information
  private currentUserSubject: BehaviorSubject<User | null>;
  public currentUser: Observable<User | null>;

  constructor(private http: HttpClient) {
    // Initialize currentUserSubject from localStorage on app startup
    const storedToken = localStorage.getItem('jwt_token');
    const user = storedToken ? this.decodeToken(storedToken) : null;
    this.currentUserSubject = new BehaviorSubject<User | null>(user);
    this.currentUser = this.currentUserSubject.asObservable();
  }

  public get currentUserValue(): User | null {
    return this.currentUserSubject.value;
  }

  register(model: RegisterRequest): Observable<any> {
    return this.http.post(`${this.apiUrl}/register`, model);
  }

  login(model: LoginRequest): Observable<LoginResponse> {
    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, model).pipe(
      map(response => {
        if (response && response.token) {
          localStorage.setItem('jwt_token', response.token);
          const user = this.decodeToken(response.token);
          this.currentUserSubject.next(user);
        }
        return response;
      })
    );
  }

  logout(): void {
    localStorage.removeItem('jwt_token');
    this.currentUserSubject.next(null);
  }

  isLoggedIn(): boolean {
    const token = localStorage.getItem('jwt_token');
    return token != null && !this.jwtHelper.isTokenExpired(token);
  }

  getToken(): string | null {
    return localStorage.getItem('jwt_token');
  }

  private decodeToken(token: string): User | null {
    try {
      const decodedToken = this.jwtHelper.decodeToken(token);
      // Extract user info and roles from the decoded token
      // Claims typically include 'sub' (userId), 'email', 'name', and 'role'
      const userId = decodedToken.sub || decodedToken.nameid;
      const email = decodedToken.email;
      const firstName = decodedToken.given_name; // Assuming these claims exist
      const lastName = decodedToken.family_name; // Assuming these claims exist
      const roles = decodedToken.role ? (Array.isArray(decodedToken.role) ? decodedToken.role : [decodedToken.role]) : [];

      return {
        id: userId,
        email: email,
        firstName: firstName,
        lastName: lastName,
        roles: roles
      };
    } catch (error) {
      console.error('Error decoding token:', error);
      return null;
    }
  }

  hasRole(requiredRoles: string[]): boolean {
    const user = this.currentUserSubject.value;
    if (!user || !user.roles) {
      return false;
    }
    return requiredRoles.some(role => user.roles.includes(role));
  }
}

// --- 6.2. Auth Interceptor (src/app/core/interceptors/auth.interceptor.ts) ---
// Automatically adds the JWT to the Authorization header of outgoing requests.

// src/app/core/interceptors/auth.interceptor.ts
import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor
} from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(private authService: AuthService) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    const token = this.authService.getToken();

    if (token) {
      // Clone the request and add the Authorization header
      request = request.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
    }

    return next.handle(request);
  }
}

// --- 6.3. API Services ---

// src/app/core/services/project.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { Project, CreateProject, UpdateProject, AddTeamMember } from 'src/app/shared/models/project.models';
import { User } from 'src/app/shared/models/user.models';

@Injectable({
  providedIn: 'root'
})
export class ProjectService {
  private apiUrl = environment.apiUrl + '/Projects';

  constructor(private http: HttpClient) { }

  getProjects(): Observable<Project[]> {
    return this.http.get<Project[]>(this.apiUrl);
  }

  getProject(id: number): Observable<Project> {
    return this.http.get<Project>(`${this.apiUrl}/${id}`);
  }

  createProject(project: CreateProject): Observable<Project> {
    return this.http.post<Project>(this.apiUrl, project);
  }

  updateProject(id: number, project: UpdateProject): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}`, project);
  }

  deleteProject(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }

  addTeamMember(projectId: number, userId: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/${projectId}/team-members`, { userId });
  }

  removeTeamMember(projectId: number, userId: string): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${projectId}/team-members/${userId}`);
  }

  // You might need a service to get all users for assigning project managers/team members
  getAllUsers(): Observable<User[]> {
    // Assuming you have an endpoint like /api/Users or /api/Admin/Users
    // You'd need to create this endpoint in your .NET Core API.
    return this.http.get<User[]>(`${environment.apiUrl}/Users`);
  }
}

// src/app/core/services/task.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { Task, CreateTask, UpdateTask, AddTaskComment, TaskComment } from 'src/app/shared/models/task.models';

@Injectable({
  providedIn: 'root'
})
export class TaskService {
  private apiUrl = environment.apiUrl + '/Tasks';

  constructor(private http: HttpClient) { }

  getTasks(): Observable<Task[]> {
    return this.http.get<Task[]>(this.apiUrl);
  }

  getTask(id: number): Observable<Task> {
    return this.http.get<Task>(`${this.apiUrl}/${id}`);
  }

  createTask(task: CreateTask): Observable<Task> {
    return this.http.post<Task>(this.apiUrl, task);
  }

  updateTask(id: number, task: UpdateTask): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}`, task);
  }

  deleteTask(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }

  addCommentToTask(taskId: number, comment: AddTaskComment): Observable<TaskComment> {
    return this.http.post<TaskComment>(`${this.apiUrl}/${taskId}/comments`, comment);
  }
}

// src/app/core/services/report.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { ProjectPerformanceReport, BatchUpdateTaskStatus } from 'src/app/shared/models/report.models';

@Injectable({
  providedIn: 'root'
})
export class ReportService {
  private apiUrl = environment.apiUrl + '/Reports';

  constructor(private http: HttpClient) { }

  getProjectPerformanceReport(): Observable<ProjectPerformanceReport[]> {
    return this.http.get<ProjectPerformanceReport[]>(`${this.apiUrl}/project-performance`);
  }

  batchUpdateTaskStatus(model: BatchUpdateTaskStatus): Observable<any> {
    return this.http.post(`${this.apiUrl}/batch-update-task-status`, model);
  }
}


// --- 7. Guards ---

// --- 7.1. Auth Guard (src/app/core/guards/auth.guard.ts) ---
// Prevents unauthenticated users from accessing protected routes.

// src/app/core/guards/auth.guard.ts
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {

  constructor(private authService: AuthService, private router: Router) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {

    if (this.authService.isLoggedIn()) {
      return true; // User is logged in, allow access
    } else {
      // User is not logged in, redirect to login page
      this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });
      return false;
    }
  }
}

// --- 7.2. Role Guard (src/app/core/guards/role.guard.ts) ---
// Prevents users without the required roles from accessing certain routes.

// src/app/core/guards/role.guard.ts
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class RoleGuard implements CanActivate {

  constructor(private authService: AuthService, private router: Router) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {

    const requiredRoles = route.data['roles'] as string[];

    if (!requiredRoles || requiredRoles.length === 0) {
      return true; // No specific roles required, allow access
    }

    if (this.authService.isLoggedIn() && this.authService.hasRole(requiredRoles)) {
      return true; // User is logged in and has at least one required role
    } else {
      // User does not have the required role, redirect to dashboard or unauthorized page
      this.router.navigate(['/dashboard']); // Or a dedicated unauthorized page
      return false;
    }
  }
}


// --- 8. Components ---

// --- 8.1. App Component (src/app/app.component.ts & .html) ---
// The root component, typically contains the navigation bar and router outlet.

// src/app/app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'task-management-ui';
}

// src/app/app.component.html
// Apply Tailwind CSS classes for a responsive layout
// Example: Using flexbox for layout, responsive padding, etc.
<div class="min-h-screen bg-gray-100 flex flex-col font-inter">
  <app-nav-bar></app-nav-bar>
  <main class="flex-grow container mx-auto px-4 py-8 sm:px-6 lg:px-8">
    <router-outlet></router-outlet>
  </main>
</div>


// --- 8.2. Navigation Bar (src/app/shared/components/nav-bar) ---
// Displays navigation links, conditional based on authentication status and roles.

// src/app/shared/components/nav-bar/nav-bar.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { AuthService } from 'src/app/core/services/auth.service';
import { Router } from '@angular/router';
import { User } from 'src/app/shared/models/user.models';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-nav-bar',
  templateUrl: './nav-bar.component.html',
  styleUrls: ['./nav-bar.component.scss']
})
export class NavBarComponent implements OnInit, OnDestroy {
  currentUser: User | null = null;
  private userSubscription: Subscription | undefined;

  constructor(private authService: AuthService, private router: Router) { }

  ngOnInit(): void {
    this.userSubscription = this.authService.currentUser.subscribe(user => {
      this.currentUser = user;
    });
  }

  ngOnDestroy(): void {
    this.userSubscription?.unsubscribe();
  }

  isLoggedIn(): boolean {
    return this.authService.isLoggedIn();
  }

  isAdminOrProjectManager(): boolean {
    return this.authService.hasRole(['Admin', 'ProjectManager']);
  }

  isAdmin(): boolean {
    return this.authService.hasRole(['Admin']);
  }

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
}

// src/app/shared/components/nav-bar/nav-bar.component.html
<nav class="bg-blue-600 p-4 shadow-md rounded-b-lg">
  <div class="container mx-auto flex justify-between items-center">
    <a routerLink="/dashboard" class="text-white text-2xl font-bold">TaskFlow</a>
    <div class="flex space-x-4">
      <ng-container *ngIf="isLoggedIn(); else loggedOutLinks">
        <a routerLink="/dashboard" class="text-white hover:text-blue-200 px-3 py-2 rounded-md transition duration-300 ease-in-out">Dashboard</a>
        <a routerLink="/projects" class="text-white hover:text-blue-200 px-3 py-2 rounded-md transition duration-300 ease-in-out">Projects</a>
        <a *ngIf="isAdminOrProjectManager()" routerLink="/reports" class="text-white hover:text-blue-200 px-3 py-2 rounded-md transition duration-300 ease-in-out">Reports</a>
        <!-- Add more links based on roles here if needed -->
        <span class="text-blue-200 px-3 py-2">Welcome, {{ currentUser?.firstName }}!</span>
        <button (click)="logout()" class="bg-blue-700 text-white px-4 py-2 rounded-md hover:bg-blue-800 transition duration-300 ease-in-out shadow-lg">Logout</button>
      </ng-container>
      <ng-template #loggedOutLinks>
        <a routerLink="/login" class="text-white hover:text-blue-200 px-3 py-2 rounded-md transition duration-300 ease-in-out">Login</a>
        <a routerLink="/register" class="text-white hover:text-blue-200 px-3 py-2 rounded-md transition duration-300 ease-in-out">Register</a>
      </ng-template>
    </div>
  </div>
</nav>


// --- 8.3. Login Component (src/app/auth/login) ---
// Handles user login with a form.

// src/app/auth/login/login.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { AuthService } from 'src/app/core/services/auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {
  loginForm: FormGroup;
  loading = false;
  error = '';
  returnUrl: string | null = null;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });

    // Get return URL from route parameters or default to dashboard
    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';
  }

  ngOnInit(): void {
    // Redirect to dashboard if already logged in
    if (this.authService.isLoggedIn()) {
      this.router.navigate(['/dashboard']);
    }
  }

  onSubmit(): void {
    this.loading = true;
    this.error = '';

    if (this.loginForm.invalid) {
      this.loading = false;
      return;
    }

    const { email, password } = this.loginForm.value;

    this.authService.login({ email, password }).subscribe({
      next: () => {
        this.router.navigate([this.returnUrl]);
      },
      error: err => {
        console.error('Login error:', err);
        this.error = 'Invalid email or password. Please try again.';
        this.loading = false;
      }
    });
  }
}

// src/app/auth/login/login.component.html
<div class="flex justify-center items-center min-h-[calc(100vh-8rem)] py-8">
  <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md border border-gray-200">
    <h2 class="text-3xl font-extrabold text-center text-gray-800 mb-8">Login to TaskFlow</h2>
    <form [formGroup]="loginForm" (ngSubmit)="onSubmit()" class="space-y-6">
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email address</label>
        <input
          id="email"
          type="email"
          formControlName="email"
          class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base transition duration-200"
          placeholder="you@example.com"
          [ngClass]="{'border-red-500': loginForm.get('email')?.invalid && loginForm.get('email')?.touched}"
        >
        <div *ngIf="loginForm.get('email')?.invalid && loginForm.get('email')?.touched" class="text-red-500 text-sm mt-1">
          <div *ngIf="loginForm.get('email')?.errors?.['required']">Email is required.</div>
          <div *ngIf="loginForm.get('email')?.errors?.['email']">Enter a valid email.</div>
        </div>
      </div>

      <div>
        <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
        <input
          id="password"
          type="password"
          formControlName="password"
          class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base transition duration-200"
          placeholder="********"
          [ngClass]="{'border-red-500': loginForm.get('password')?.invalid && loginForm.get('password')?.touched}"
        >
        <div *ngIf="loginForm.get('password')?.invalid && loginForm.get('password')?.touched" class="text-red-500 text-sm mt-1">
          <div *ngIf="loginForm.get('password')?.errors?.['required']">Password is required.</div>
        </div>
      </div>

      <div *ngIf="error" class="text-red-600 text-center font-medium bg-red-100 p-3 rounded-md border border-red-200">
        {{ error }}
      </div>

      <button
        type="submit"
        [disabled]="loginForm.invalid || loading"
        class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-lg text-lg font-semibold text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300 ease-in-out transform hover:scale-105"
      >
        <span *ngIf="!loading">Login</span>
        <span *ngIf="loading" class="flex items-center">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Logging in...
        </span>
      </button>
    </form>
    <p class="mt-6 text-center text-gray-600 text-sm">
      Don't have an account? <a routerLink="/register" class="font-medium text-blue-600 hover:text-blue-500 transition duration-200">Register here</a>
    </p>
  </div>
</div>


// --- 8.4. Register Component (src/app/auth/register) ---
// Handles user registration with a form.

// src/app/auth/register/register.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/core/services/auth.service';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent implements OnInit {
  registerForm: FormGroup;
  loading = false;
  success = false;
  error = '';

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.registerForm = this.fb.group({
      firstName: ['', Validators.required],
      lastName: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(8)]],
      confirmPassword: ['', Validators.required]
    }, { validator: this.passwordMatchValidator });
  }

  ngOnInit(): void {
    // Redirect to dashboard if already logged in
    if (this.authService.isLoggedIn()) {
      this.router.navigate(['/dashboard']);
    }
  }

  // Custom validator for password match
  passwordMatchValidator(formGroup: FormGroup) {
    const password = formGroup.get('password')?.value;
    const confirmPassword = formGroup.get('confirmPassword')?.value;
    return password === confirmPassword ? null : { mismatch: true };
  }

  onSubmit(): void {
    this.loading = true;
    this.error = '';
    this.success = false;

    if (this.registerForm.invalid) {
      this.loading = false;
      return;
    }

    const { firstName, lastName, email, password, confirmPassword } = this.registerForm.value;

    this.authService.register({ firstName, lastName, email, password, confirmPassword }).subscribe({
      next: () => {
        this.success = true;
        this.loading = false;
        // Optionally, auto-login or redirect to login page after successful registration
        setTimeout(() => {
          this.router.navigate(['/login']);
        }, 3000);
      },
      error: err => {
        console.error('Registration error:', err);
        this.error = 'Registration failed. Please check your details and try again.';
        if (err.error && typeof err.error === 'object') {
          // Attempt to parse specific error messages from the backend
          const errors = Object.values(err.error).flat();
          if (errors.length > 0) {
            this.error = errors.join('; ');
          }
        }
        this.loading = false;
      }
    });
  }
}

// src/app/auth/register/register.component.html
<div class="flex justify-center items-center min-h-[calc(100vh-8rem)] py-8">
  <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-lg border border-gray-200">
    <h2 class="text-3xl font-extrabold text-center text-gray-800 mb-8">Create Your Account</h2>
    <form [formGroup]="registerForm" (ngSubmit)="onSubmit()" class="space-y-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="firstName" class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
          <input
            id="firstName"
            type="text"
            formControlName="firstName"
            class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base transition duration-200"
            [ngClass]="{'border-red-500': registerForm.get('firstName')?.invalid && registerForm.get('firstName')?.touched}"
          >
          <div *ngIf="registerForm.get('firstName')?.invalid && registerForm.get('firstName')?.touched" class="text-red-500 text-sm mt-1">
            <div *ngIf="registerForm.get('firstName')?.errors?.['required']">First Name is required.</div>
          </div>
        </div>
        <div>
          <label for="lastName" class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
          <input
            id="lastName"
            type="text"
            formControlName="lastName"
            class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base transition duration-200"
            [ngClass]="{'border-red-500': registerForm.get('lastName')?.invalid && registerForm.get('lastName')?.touched}"
          >
          <div *ngIf="registerForm.get('lastName')?.invalid && registerForm.get('lastName')?.touched" class="text-red-500 text-sm mt-1">
            <div *ngIf="registerForm.get('lastName')?.errors?.['required']">Last Name is required.</div>
          </div>
        </div>
      </div>

      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email address</label>
        <input
          id="email"
          type="email"
          formControlName="email"
          class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base transition duration-200"
          placeholder="you@example.com"
          [ngClass]="{'border-red-500': registerForm.get('email')?.invalid && registerForm.get('email')?.touched}"
        >
        <div *ngIf="registerForm.get('email')?.invalid && registerForm.get('email')?.touched" class="text-red-500 text-sm mt-1">
          <div *ngIf="registerForm.get('email')?.errors?.['required']">Email is required.</div>
          <div *ngIf="registerForm.get('email')?.errors?.['email']">Enter a valid email.</div>
        </div>
      </div>

      <div>
        <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
        <input
          id="password"
          type="password"
          formControlName="password"
          class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base transition duration-200"
          placeholder="********"
          [ngClass]="{'border-red-500': registerForm.get('password')?.invalid && registerForm.get('password')?.touched}"
        >
        <div *ngIf="registerForm.get('password')?.invalid && registerForm.get('password')?.touched" class="text-red-500 text-sm mt-1">
          <div *ngIf="registerForm.get('password')?.errors?.['required']">Password is required.</div>
          <div *ngIf="registerForm.get('password')?.errors?.['minlength']">Password must be at least 8 characters.</div>
        </div>
      </div>

      <div>
        <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
        <input
          id="confirmPassword"
          type="password"
          formControlName="confirmPassword"
          class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base transition duration-200"
          placeholder="********"
          [ngClass]="{'border-red-500': registerForm.get('confirmPassword')?.invalid && registerForm.get('confirmPassword')?.touched}"
        >
        <div *ngIf="registerForm.get('confirmPassword')?.invalid && registerForm.get('confirmPassword')?.touched" class="text-red-500 text-sm mt-1">
          <div *ngIf="registerForm.get('confirmPassword')?.errors?.['required']">Confirm Password is required.</div>
          <div *ngIf="registerForm.errors?.['mismatch'] && registerForm.get('confirmPassword')?.touched">Passwords do not match.</div>
        </div>
      </div>

      <div *ngIf="error" class="text-red-600 text-center font-medium bg-red-100 p-3 rounded-md border border-red-200">
        {{ error }}
      </div>

      <div *ngIf="success" class="text-green-600 text-center font-medium bg-green-100 p-3 rounded-md border border-green-200">
        Registration successful! Redirecting to login...
      </div>

      <button
        type="submit"
        [disabled]="registerForm.invalid || loading"
        class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-lg text-lg font-semibold text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-300 ease-in-out transform hover:scale-105"
      >
        <span *ngIf="!loading">Register</span>
        <span *ngIf="loading" class="flex items-center">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Registering...
        </span>
      </button>
    </form>
    <p class="mt-6 text-center text-gray-600 text-sm">
      Already have an account? <a routerLink="/login" class="font-medium text-blue-600 hover:text-blue-500 transition duration-200">Login here</a>
    </p>
  </div>
</div>


// --- 8.5. Dashboard Component (src/app/features/dashboard) ---
// A simple landing page after successful login.

// src/app/features/dashboard/dashboard.component.ts
import { Component, OnInit } from '@angular/core';
import { AuthService } from 'src/app/core/services/auth.service';
import { User } from 'src/app/shared/models/user.models';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {
  currentUser: User | null = null;

  constructor(private authService: AuthService) { }

  ngOnInit(): void {
    this.currentUser = this.authService.currentUserValue;
  }
}

// src/app/features/dashboard/dashboard.component.html
<div class="flex flex-col items-center justify-center py-12">
  <div class="bg-white p-10 rounded-xl shadow-xl w-full max-w-2xl text-center border border-gray-200">
    <h1 class="text-4xl font-extrabold text-gray-900 mb-4">Welcome to TaskFlow!</h1>
    <p class="text-xl text-gray-700 mb-8">
      Hello, <span class="font-semibold text-blue-600">{{ currentUser?.firstName }} {{ currentUser?.lastName }}</span>!
      You are logged in as <span class="font-semibold text-blue-600">{{ currentUser?.email }}</span>.
    </p>
    <p class="text-lg text-gray-600 mb-10">
      Your roles: <span class="font-medium text-purple-600">{{ currentUser?.roles.join(', ') || 'N/A' }}</span>
    </p>
    <div class="space-y-4 md:space-y-0 md:flex md:space-x-6 justify-center">
      <a routerLink="/projects" class="inline-block bg-blue-600 text-white px-8 py-4 rounded-lg shadow-lg hover:bg-blue-700 transition duration-300 ease-in-out transform hover:scale-105 text-lg font-semibold">
        View Projects
      </a>
      <a *ngIf="authService.isAdminOrProjectManager()" routerLink="/reports" class="inline-block bg-purple-600 text-white px-8 py-4 rounded-lg shadow-lg hover:bg-purple-700 transition duration-300 ease-in-out transform hover:scale-105 text-lg font-semibold">
        Access Reports
      </a>
    </div>
  </div>
</div>


// --- 8.6. Project List Component (src/app/features/projects/project-list) ---
// Displays a list of projects.

// src/app/features/projects/project-list/project-list.component.ts
import { Component, OnInit } from '@angular/core';
import { ProjectService } from 'src/app/core/services/project.service';
import { Project } from 'src/app/shared/models/project.models';
import { AuthService } from 'src/app/core/services/auth.service';

@Component({
  selector: 'app-project-list',
  templateUrl: './project-list.component.html',
  styleUrls: ['./project-list.component.scss']
})
export class ProjectListComponent implements OnInit {
  projects: Project[] = [];
  loading = true;
  error: string | null = null;

  constructor(private projectService: ProjectService, public authService: AuthService) { }

  ngOnInit(): void {
    this.loadProjects();
  }

  loadProjects(): void {
    this.loading = true;
    this.error = null;
    this.projectService.getProjects().subscribe({
      next: (data) => {
        this.projects = data;
        this.loading = false;
      },
      error: (err) => {
        console.error('Failed to load projects:', err);
        this.error = 'Failed to load projects. Please try again later.';
        this.loading = false;
      }
    });
  }

  deleteProject(id: number): void {
    if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
      this.projectService.deleteProject(id).subscribe({
        next: () => {
          this.projects = this.projects.filter(p => p.id !== id);
          // Show a success message (e.g., using a toast notification)
          console.log('Project deleted successfully!');
        },
        error: (err) => {
          console.error('Error deleting project:', err);
          this.error = 'Failed to delete project.';
        }
      });
    }
  }
}

// src/app/features/projects/project-list/project-list.component.html
<div class="py-8">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-4xl font-extrabold text-gray-900">Projects</h1>
    <button *ngIf="authService.isAdminOrProjectManager()" routerLink="/projects/new" class="bg-blue-600 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-blue-700 transition duration-300 ease-in-out transform hover:scale-105 text-lg font-semibold">
      <i class="fas fa-plus mr-2"></i> Create New Project
    </button>
  </div>

  <div *ngIf="loading" class="text-center py-10">
    <p class="text-gray-600 text-lg">Loading projects...</p>
    <svg class="animate-spin mx-auto mt-4 h-8 w-8 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  </div>

  <div *ngIf="error" class="text-red-600 text-center font-medium bg-red-100 p-4 rounded-md border border-red-200 my-6">
    {{ error }}
  </div>

  <div *ngIf="!loading && projects.length === 0 && !error" class="text-center py-10">
    <p class="text-gray-600 text-lg">No projects found. Start by creating one!</p>
  </div>

  <div *ngIf="!loading && projects.length > 0" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <div *ngFor="let project of projects" class="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-gray-200 flex flex-col justify-between">
      <div>
        <h3 class="text-2xl font-bold text-gray-800 mb-2">{{ project.name }}</h3>
        <p class="text-gray-600 text-sm mb-4 line-clamp-3">{{ project.description }}</p>
        <div class="text-gray-500 text-sm mb-2">
          <span class="font-semibold">Manager:</span> {{ project.projectManagerName || 'N/A' }}
        </div>
        <div class="text-gray-500 text-sm mb-4">
          <span class="font-semibold">Due Date:</span> {{ project.dueDate | date:'shortDate' || 'N/A' }}
        </div>
      </div>
      <div class="mt-4 flex space-x-3">
        <a [routerLink]="['/projects', project.id]" class="flex-grow bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-200 text-center font-medium shadow">
          View Details
        </a>
        <button *ngIf="authService.isAdminOrProjectManager()" (click)="deleteProject(project.id)" class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition duration-200 font-medium shadow">
          Delete
        </button>
      </div>
    </div>
  </div>
</div>


// --- 8.7. Project Detail Component (src/app/features/projects/project-detail) ---
// Displays details of a single project, its tasks, and team members.

// src/app/features/projects/project-detail/project-detail.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ProjectService } from 'src/app/core/services/project.service';
import { Project } from 'src/app/shared/models/project.models';
import { Task } from 'src/app/shared/models/task.models';
import { User } from 'src/app/shared/models/user.models';
import { AuthService } from 'src/app/core/services/auth.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms'; // For adding team member

@Component({
  selector: 'app-project-detail',
  templateUrl: './project-detail.component.html',
  styleUrls: ['./project-detail.component.scss']
})
export class ProjectDetailComponent implements OnInit {
  project: Project | null = null;
  loading = true;
  error: string | null = null;
  projectId: number | null = null;
  allUsers: User[] = []; // For adding team members
  addTeamMemberForm: FormGroup;
  addTeamMemberError: string | null = null;
  addTeamMemberSuccess: string | null = null;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private projectService: ProjectService,
    public authService: AuthService,
    private fb: FormBuilder
  ) {
    this.addTeamMemberForm = this.fb.group({
      userId: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.projectId = Number(this.route.snapshot.paramMap.get('id'));
    if (this.projectId) {
      this.loadProjectDetails(this.projectId);
      this.loadAllUsers();
    } else {
      this.error = 'Project ID not provided.';
      this.loading = false;
    }
  }

  loadProjectDetails(id: number): void {
    this.loading = true;
    this.error = null;
    this.projectService.getProject(id).subscribe({
      next: (data) => {
        this.project = data;
        this.loading = false;
      },
      error: (err) => {
        console.error('Failed to load project details:', err);
        this.error = 'Failed to load project details. It might not exist or you lack permission.';
        this.loading = false;
      }
    });
  }

  loadAllUsers(): void {
    // This assumes an /api/Users endpoint exists and is accessible
    this.projectService.getAllUsers().subscribe({
      next: (users) => {
        this.allUsers = users;
      },
      error: (err) => {
        console.error('Failed to load users:', err);
      }
    });
  }

  onAddTeamMemberSubmit(): void {
    this.addTeamMemberError = null;
    this.addTeamMemberSuccess = null;

    if (this.addTeamMemberForm.invalid || !this.projectId) {
      return;
    }

    const userIdToAdd = this.addTeamMemberForm.value.userId;

    this.projectService.addTeamMember(this.projectId, userIdToAdd).subscribe({
      next: () => {
        this.addTeamMemberSuccess = 'Team member added successfully!';
        this.addTeamMemberForm.reset();
        this.loadProjectDetails(this.projectId!); // Reload project to see new member
      },
      error: (err) => {
        console.error('Failed to add team member:', err);
        this.addTeamMemberError = err.error?.message || 'Failed to add team member.';
      }
    });
  }

  removeTeamMember(userId: string): void {
    if (!this.projectId || !confirm('Are you sure you want to remove this team member from the project?')) {
      return;
    }

    this.projectService.removeTeamMember(this.projectId, userId).subscribe({
      next: () => {
        console.log('Team member removed successfully!');
        this.loadProjectDetails(this.projectId!); // Reload project to reflect changes
      },
      error: (err) => {
        console.error('Failed to remove team member:', err);
        // Display error message to user
      }
    });
  }

  // Helper to check if a user is already a team member
  isTeamMember(userId: string): boolean {
    return this.project?.teamMembers?.some(member => member.id === userId) || false;
  }
}

// src/app/features/projects/project-detail/project-detail.component.html
<div class="py-8">
  <div *ngIf="loading" class="text-center py-10">
    <p class="text-gray-600 text-lg">Loading project details...</p>
    <svg class="animate-spin mx-auto mt-4 h-8 w-8 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  </div>

  <div *ngIf="error" class="text-red-600 text-center font-medium bg-red-100 p-4 rounded-md border border-red-200 my-6">
    {{ error }}
  </div>

  <div *ngIf="project && !loading">
    <div class="bg-white p-8 rounded-xl shadow-xl border border-gray-200 mb-8">
      <h1 class="text-4xl font-extrabold text-gray-900 mb-4">{{ project.name }}</h1>
      <p class="text-gray-700 text-lg mb-6">{{ project.description }}</p>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-gray-600 text-base mb-6">
        <div><span class="font-semibold">Created:</span> {{ project.createdDate | date:'medium' }}</div>
        <div><span class="font-semibold">Due Date:</span> {{ project.dueDate | date:'medium' || 'N/A' }}</div>
        <div><span class="font-semibold">Manager:</span> {{ project.projectManagerName || 'Unassigned' }}</div>
      </div>

      <div class="flex space-x-4">
        <button *ngIf="authService.isAdminOrProjectManager()" routerLink="/projects/edit/{{project.id}}" class="bg-yellow-500 text-white px-5 py-2 rounded-md hover:bg-yellow-600 transition duration-200 font-medium shadow">
          Edit Project
        </button>
        <button *ngIf="authService.isAdminOrProjectManager()" (click)="deleteProject(project.id)" class="bg-red-500 text-white px-5 py-2 rounded-md hover:bg-red-600 transition duration-200 font-medium shadow">
          Delete Project
        </button>
        <button routerLink="/projects" class="bg-gray-300 text-gray-800 px-5 py-2 rounded-md hover:bg-gray-400 transition duration-200 font-medium shadow">
          Back to Projects
        </button>
      </div>
    </div>

    <!-- Team Members Section -->
    <div class="bg-white p-8 rounded-xl shadow-xl border border-gray-200 mb-8">
      <h2 class="text-3xl font-bold text-gray-800 mb-6">Team Members</h2>
      <div *ngIf="project.teamMembers && project.teamMembers.length > 0" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
        <div *ngFor="let member of project.teamMembers" class="flex items-center justify-between bg-gray-50 p-4 rounded-lg border border-gray-200 shadow-sm">
          <span class="text-gray-700 font-medium">{{ member.firstName }} {{ member.lastName }} ({{ member.email }})</span>
          <button *ngIf="authService.isAdminOrProjectManager()" (click)="removeTeamMember(member.id)" class="text-red-500 hover:text-red-700 transition duration-200">
            <i class="fas fa-user-minus"></i> <!-- Font Awesome icon for remove user -->
          </button>
        </div>
      </div>
      <div *ngIf="!project.teamMembers || project.teamMembers.length === 0" class="text-gray-600 mb-6">
        No team members assigned to this project yet.
      </div>

      <div *ngIf="authService.isAdminOrProjectManager()">
        <h3 class="text-2xl font-bold text-gray-800 mb-4">Add Team Member</h3>
        <form [formGroup]="addTeamMemberForm" (ngSubmit)="onAddTeamMemberSubmit()" class="flex flex-col md:flex-row gap-4">
          <select formControlName="userId" class="flex-grow px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base">
            <option value="">Select User</option>
            <option *ngFor="let user of allUsers" [value]="user.id" [disabled]="isTeamMember(user.id)">
              {{ user.firstName }} {{ user.lastName }} ({{ user.email }})
            </option>
          </select>
          <button type="submit" [disabled]="addTeamMemberForm.invalid" class="bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-green-700 transition duration-300 ease-in-out font-semibold">
            Add Member
          </button>
        </form>
        <div *ngIf="addTeamMemberError" class="text-red-600 text-sm mt-2">{{ addTeamMemberError }}</div>
        <div *ngIf="addTeamMemberSuccess" class="text-green-600 text-sm mt-2">{{ addTeamMemberSuccess }}</div>
      </div>
    </div>

    <!-- Tasks Section -->
    <div class="bg-white p-8 rounded-xl shadow-xl border border-gray-200">
      <h2 class="text-3xl font-bold text-gray-800 mb-6">Tasks</h2>
      <button *ngIf="authService.isAdminOrProjectManager()" routerLink="/tasks/new?projectId={{project.id}}" class="bg-blue-600 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-blue-700 transition duration-300 ease-in-out transform hover:scale-105 text-lg font-semibold mb-6">
        <i class="fas fa-plus mr-2"></i> Create New Task
      </button>

      <div *ngIf="project.tasks && project.tasks.length > 0" class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div *ngFor="let task of project.tasks" class="bg-gray-50 p-5 rounded-lg shadow-md border border-gray-200">
          <h3 class="text-xl font-semibold text-gray-800 mb-2">{{ task.title }}</h3>
          <p class="text-gray-600 text-sm mb-3 line-clamp-2">{{ task.description }}</p>
          <div class="text-gray-500 text-sm mb-2">
            <span class="font-semibold">Status:</span>
            <span [ngClass]="{
              'text-blue-600': task.status === 'ToDo',
              'text-yellow-600': task.status === 'InProgress',
              'text-green-600': task.status === 'Done',
              'text-red-600': task.status === 'Blocked'
            }" class="font-medium ml-1">{{ task.status }}</span>
          </div>
          <div class="text-gray-500 text-sm mb-2">
            <span class="font-semibold">Priority:</span>
            <span [ngClass]="{
              'text-green-500': task.priority === 'Low',
              'text-yellow-500': task.priority === 'Medium',
              'text-orange-500': task.priority === 'High',
              'text-red-600': task.priority === 'Critical'
            }" class="font-medium ml-1">{{ task.priority }}</span>
          </div>
          <div class="text-gray-500 text-sm mb-4">
            <span class="font-semibold">Assigned To:</span> {{ task.assignedToName || 'Unassigned' }}
          </div>
          <div class="flex space-x-3">
            <a [routerLink]="['/tasks', task.id]" class="flex-grow bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-200 text-center font-medium shadow">
              View Task
            </a>
            <button *ngIf="authService.isAdminOrProjectManager()" (click)="deleteTask(task.id)" class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition duration-200 font-medium shadow">
              Delete
            </button>
          </div>
        </div>
      </div>
      <div *ngIf="!project.tasks || project.tasks.length === 0" class="text-gray-600">
        No tasks found for this project.
      </div>
    </div>
  </div>
</div>


// --- 8.8. Task Detail Component (src/app/features/tasks/task-detail) ---
// Displays details of a single task and its comments.

// src/app/features/tasks/task-detail/task-detail.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { TaskService } from 'src/app/core/services/task.service';
import { Task, TaskComment } from 'src/app/shared/models/task.models';
import { AuthService } from 'src/app/core/services/auth.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-task-detail',
  templateUrl: './task-detail.component.html',
  styleUrls: ['./task-detail.component.scss']
})
export class TaskDetailComponent implements OnInit {
  task: Task | null = null;
  loading = true;
  error: string | null = null;
  taskId: number | null = null;
  commentForm: FormGroup;
  commentError: string | null = null;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private taskService: TaskService,
    public authService: AuthService,
    private fb: FormBuilder
  ) {
    this.commentForm = this.fb.group({
      content: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.taskId = Number(this.route.snapshot.paramMap.get('id'));
    if (this.taskId) {
      this.loadTaskDetails(this.taskId);
    } else {
      this.error = 'Task ID not provided.';
      this.loading = false;
    }
  }

  loadTaskDetails(id: number): void {
    this.loading = true;
    this.error = null;
    this.taskService.getTask(id).subscribe({
      next: (data) => {
        this.task = data;
        this.loading = false;
      },
      error: (err) => {
        console.error('Failed to load task details:', err);
        this.error = 'Failed to load task details. It might not exist or you lack permission.';
        this.loading = false;
      }
    });
  }

  onAddCommentSubmit(): void {
    this.commentError = null;
    if (this.commentForm.invalid || !this.taskId) {
      return;
    }

    const content = this.commentForm.value.content;
    this.taskService.addCommentToTask(this.taskId, { content }).subscribe({
      next: (newComment) => {
        if (this.task?.comments) {
          this.task.comments.push(newComment); // Add new comment to the list
        } else {
          this.task!.comments = [newComment]; // Initialize if null
        }
        this.commentForm.reset(); // Clear the form
      },
      error: (err) => {
        console.error('Failed to add comment:', err);
        this.commentError = err.error?.message || 'Failed to add comment.';
      }
    });
  }

  deleteTask(id: number): void {
    if (confirm('Are you sure you want to delete this task?')) {
      this.taskService.deleteTask(id).subscribe({
        next: () => {
          console.log('Task deleted successfully!');
          this.router.navigate(['/projects', this.task?.projectId]); // Navigate back to project details
        },
        error: (err) => {
          console.error('Error deleting task:', err);
          this.error = 'Failed to delete task.';
        }
      });
    }
  }
}

// src/app/features/tasks/task-detail/task-detail.component.html
<div class="py-8">
  <div *ngIf="loading" class="text-center py-10">
    <p class="text-gray-600 text-lg">Loading task details...</p>
    <svg class="animate-spin mx-auto mt-4 h-8 w-8 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  </div>

  <div *ngIf="error" class="text-red-600 text-center font-medium bg-red-100 p-4 rounded-md border border-red-200 my-6">
    {{ error }}
  </div>

  <div *ngIf="task && !loading">
    <div class="bg-white p-8 rounded-xl shadow-xl border border-gray-200 mb-8">
      <h1 class="text-4xl font-extrabold text-gray-900 mb-4">{{ task.title }}</h1>
      <p class="text-gray-700 text-lg mb-6">{{ task.description }}</p>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-gray-600 text-base mb-6">
        <div><span class="font-semibold">Project:</span> <a [routerLink]="['/projects', task.projectId]" class="text-blue-600 hover:underline">{{ task.projectName }}</a></div>
        <div><span class="font-semibold">Assigned To:</span> {{ task.assignedToName || 'Unassigned' }}</div>
        <div><span class="font-semibold">Status:</span>
          <span [ngClass]="{
            'text-blue-600': task.status === 'ToDo',
            'text-yellow-600': task.status === 'InProgress',
            'text-green-600': task.status === 'Done',
            'text-red-600': task.status === 'Blocked'
          }" class="font-medium ml-1">{{ task.status }}</span>
        </div>
        <div><span class="font-semibold">Priority:</span>
          <span [ngClass]="{
            'text-green-500': task.priority === 'Low',
            'text-yellow-500': task.priority === 'Medium',
            'text-orange-500': task.priority === 'High',
            'text-red-600': task.priority === 'Critical'
          }" class="font-medium ml-1">{{ task.priority }}</span>
        </div>
        <div><span class="font-semibold">Created:</span> {{ task.createdDate | date:'medium' }}</div>
        <div><span class="font-semibold">Due Date:</span> {{ task.dueDate | date:'medium' || 'N/A' }}</div>
      </div>

      <div class="flex space-x-4">
        <button *ngIf="authService.isAdminOrProjectManager() || task.assignedToId === authService.currentUserValue?.id" routerLink="/tasks/edit/{{task.id}}" class="bg-yellow-500 text-white px-5 py-2 rounded-md hover:bg-yellow-600 transition duration-200 font-medium shadow">
          Edit Task
        </button>
        <button *ngIf="authService.isAdminOrProjectManager()" (click)="deleteTask(task.id)" class="bg-red-500 text-white px-5 py-2 rounded-md hover:bg-red-600 transition duration-200 font-medium shadow">
          Delete Task
        </button>
        <button [routerLink]="['/projects', task.projectId]" class="bg-gray-300 text-gray-800 px-5 py-2 rounded-md hover:bg-gray-400 transition duration-200 font-medium shadow">
          Back to Project
        </button>
      </div>
    </div>

    <!-- Comments Section -->
    <div class="bg-white p-8 rounded-xl shadow-xl border border-gray-200">
      <h2 class="text-3xl font-bold text-gray-800 mb-6">Comments</h2>

      <div *ngIf="task.comments && task.comments.length > 0" class="space-y-4 mb-6">
        <div *ngFor="let comment of task.comments" class="bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200">
          <p class="text-gray-800 text-base mb-2">{{ comment.content }}</p>
          <div class="text-gray-500 text-sm">
            <span class="font-semibold">{{ comment.userName }}</span> on {{ comment.createdDate | date:'short' }}
          </div>
        </div>
      </div>
      <div *ngIf="!task.comments || task.comments.length === 0" class="text-gray-600 mb-6">
        No comments yet. Be the first to add one!
      </div>

      <h3 class="text-2xl font-bold text-gray-800 mb-4">Add a Comment</h3>
      <form [formGroup]="commentForm" (ngSubmit)="onAddCommentSubmit()" class="flex flex-col gap-4">
        <textarea
          formControlName="content"
          rows="3"
          class="block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base"
          placeholder="Write your comment here..."
          [ngClass]="{'border-red-500': commentForm.get('content')?.invalid && commentForm.get('content')?.touched}"
        ></textarea>
        <div *ngIf="commentForm.get('content')?.invalid && commentForm.get('content')?.touched" class="text-red-500 text-sm">
          Comment content is required.
        </div>
        <div *ngIf="commentError" class="text-red-600 text-sm">{{ commentError }}</div>
        <button type="submit" [disabled]="commentForm.invalid" class="bg-blue-600 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-blue-700 transition duration-300 ease-in-out font-semibold">
          Add Comment
        </button>
      </form>
    </div>
  </div>
</div>

// --- 8.9. Report Component (src/app/features/reports/report.component.ts) ---
// Displays project performance reports.

// src/app/features/reports/report.component.ts
import { Component, OnInit } from '@angular/core';
import { ReportService } from 'src/app/core/services/report.service';
import { ProjectPerformanceReport, BatchUpdateTaskStatus } from 'src/app/shared/models/report.models';
import { Task } from 'src/app/shared/models/task.models'; // For TaskStatus enum
import { TaskService } from 'src/app/core/services/task.service'; // To get tasks for batch update example

@Component({
  selector: 'app-report',
  templateUrl: './report.component.html',
  styleUrls: ['./report.component.scss']
})
export class ReportComponent implements OnInit {
  projectReports: ProjectPerformanceReport[] = [];
  allTasks: Task[] = []; // For batch update example
  selectedTaskIds: number[] = [];
  batchUpdateStatus: 'ToDo' | 'InProgress' | 'Done' | 'Blocked' = 'ToDo';
  loadingReports = true;
  loadingBatchUpdate = false;
  reportError: string | null = null;
  batchUpdateMessage: string | null = null;
  batchUpdateError: string | null = null;

  constructor(private reportService: ReportService, private taskService: TaskService) { }

  ngOnInit(): void {
    this.loadProjectPerformanceReport();
    this.loadAllTasksForBatchUpdate();
  }

  loadProjectPerformanceReport(): void {
    this.loadingReports = true;
    this.reportError = null;
    this.reportService.getProjectPerformanceReport().subscribe({
      next: (data) => {
        this.projectReports = data;
        this.loadingReports = false;
      },
      error: (err) => {
        console.error('Failed to load project performance report:', err);
        this.reportError = 'Failed to load reports. Please try again later.';
        this.loadingReports = false;
      }
    });
  }

  loadAllTasksForBatchUpdate(): void {
    // This is for demonstration. In a real app, you might fetch tasks for a specific project
    // or implement a more robust task selection mechanism.
    this.taskService.getTasks().subscribe({
      next: (tasks) => {
        this.allTasks = tasks;
      },
      error: (err) => {
        console.error('Failed to load tasks for batch update:', err);
      }
    });
  }

  toggleTaskSelection(taskId: number): void {
    const index = this.selectedTaskIds.indexOf(taskId);
    if (index > -1) {
      this.selectedTaskIds.splice(index, 1);
    } else {
      this.selectedTaskIds.push(taskId);
    }
  }

  performBatchUpdate(): void {
    this.loadingBatchUpdate = true;
    this.batchUpdateMessage = null;
    this.batchUpdateError = null;

    if (this.selectedTaskIds.length === 0) {
      this.batchUpdateError = 'Please select at least one task for batch update.';
      this.loadingBatchUpdate = false;
      return;
    }

    const payload: BatchUpdateTaskStatus = {
      taskIds: this.selectedTaskIds,
      newStatus: this.batchUpdateStatus
    };

    this.reportService.batchUpdateTaskStatus(payload).subscribe({
      next: (res) => {
        this.batchUpdateMessage = res.message || 'Batch update successful!';
        this.selectedTaskIds = []; // Clear selection
        this.loadProjectPerformanceReport(); // Reload reports to reflect changes
        this.loadAllTasksForBatchUpdate(); // Reload tasks to reflect changes
        this.loadingBatchUpdate = false;
      },
      error: (err) => {
        console.error('Batch update failed:', err);
        this.batchUpdateError = err.error?.message || 'Batch update failed. Please check the console for details.';
        this.loadingBatchUpdate = false;
      }
    });
  }
}

// src/app/features/reports/report.component.html
<div class="py-8">
  <h1 class="text-4xl font-extrabold text-gray-900 mb-6">Reports & Analytics</h1>

  <!-- Project Performance Report Section -->
  <div class="bg-white p-8 rounded-xl shadow-xl border border-gray-200 mb-8">
    <h2 class="text-3xl font-bold text-gray-800 mb-6">Project Performance Overview</h2>

    <div *ngIf="loadingReports" class="text-center py-10">
      <p class="text-gray-600 text-lg">Generating reports...</p>
      <svg class="animate-spin mx-auto mt-4 h-8 w-8 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </div>

    <div *ngIf="reportError" class="text-red-600 text-center font-medium bg-red-100 p-4 rounded-md border border-red-200 my-6">
      {{ reportError }}
    </div>

    <div *ngIf="!loadingReports && projectReports.length === 0 && !reportError" class="text-center py-10">
      <p class="text-gray-600 text-lg">No project performance data available.</p>
    </div>

    <div *ngIf="!loadingReports && projectReports.length > 0" class="space-y-8">
      <div *ngFor="let report of projectReports" class="bg-gray-50 p-6 rounded-lg shadow-md border border-gray-200">
        <h3 class="text-2xl font-semibold text-gray-800 mb-4">{{ report.projectName }}</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-gray-700 text-base mb-6">
          <div><span class="font-semibold">Total Tasks:</span> {{ report.totalTasks }}</div>
          <div><span class="font-semibold">Completed:</span> {{ report.completedTasks }}</div>
          <div><span class="font-semibold">In Progress:</span> {{ report.inProgressTasks }}</div>
          <div><span class="font-semibold">Overdue:</span> {{ report.overdueTasks }}</div>
          <div class="md:col-span-2 lg:col-span-4"><span class="font-semibold">Completion Rate:</span> {{ report.completionRate | number:'1.0-2' }}%</div>
        </div>

        <h4 class="text-xl font-semibold text-gray-700 mb-3">Task Distribution by Assignee:</h4>
        <div *ngIf="report.taskDistributionByAssignee.length > 0" class="overflow-x-auto">
          <table class="min-w-full bg-white rounded-lg shadow-sm border border-gray-200">
            <thead>
              <tr class="bg-gray-100 border-b border-gray-200 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">
                <th class="py-3 px-4 rounded-tl-lg">Assignee</th>
                <th class="py-3 px-4">Total Tasks</th>
                <th class="py-3 px-4 rounded-tr-lg">Completed Tasks</th>
              </tr>
            </thead>
            <tbody>
              <tr *ngFor="let assignee of report.taskDistributionByAssignee" class="border-b border-gray-200 last:border-b-0 hover:bg-gray-50">
                <td class="py-3 px-4 text-gray-800">{{ assignee.assigneeName }}</td>
                <td class="py-3 px-4 text-gray-800">{{ assignee.taskCount }}</td>
                <td class="py-3 px-4 text-gray-800">{{ assignee.completedTaskCount }}</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div *ngIf="report.taskDistributionByAssignee.length === 0" class="text-gray-600 text-sm">No task distribution data.</div>
      </div>
    </div>
  </div>

  <!-- Batch Task Update Section -->
  <div class="bg-white p-8 rounded-xl shadow-xl border border-gray-200">
    <h2 class="text-3xl font-bold text-gray-800 mb-6">Batch Task Status Update</h2>

    <div class="mb-6">
      <label for="batchStatus" class="block text-lg font-medium text-gray-700 mb-2">Select New Status:</label>
      <select id="batchStatus" [(ngModel)]="batchUpdateStatus" class="block w-full md:w-1/3 px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-base">
        <option value="ToDo">To Do</option>
        <option value="InProgress">In Progress</option>
        <option value="Done">Done</option>
        <option value="Blocked">Blocked</option>
      </select>
    </div>

    <h3 class="text-2xl font-bold text-gray-800 mb-4">Select Tasks:</h3>
    <div *ngIf="allTasks.length === 0" class="text-gray-600 mb-6">No tasks available for batch update.</div>
    <div *ngIf="allTasks.length > 0" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
      <div *ngFor="let task of allTasks" class="flex items-center bg-gray-50 p-4 rounded-lg border border-gray-200 shadow-sm">
        <input
          type="checkbox"
          [id]="'task-' + task.id"
          [checked]="selectedTaskIds.includes(task.id)"
          (change)="toggleTaskSelection(task.id)"
          class="h-5 w-5 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
        >
        <label [for]="'task-' + task.id" class="ml-3 text-gray-800 font-medium cursor-pointer">
          {{ task.title }} ({{ task.projectName }}) - <span [ngClass]="{
            'text-blue-600': task.status === 'ToDo',
            'text-yellow-600': task.status === 'InProgress',
            'text-green-600': task.status === 'Done',
            'text-red-600': task.status === 'Blocked'
          }" class="font-medium">{{ task.status }}</span>
        </label>
      </div>
    </div>

    <div *ngIf="batchUpdateError" class="text-red-600 text-center font-medium bg-red-100 p-3 rounded-md border border-red-200 my-4">
      {{ batchUpdateError }}
    </div>
    <div *ngIf="batchUpdateMessage" class="text-green-600 text-center font-medium bg-green-100 p-3 rounded-md border border-green-200 my-4">
      {{ batchUpdateMessage }}
    </div>

    <button
      (click)="performBatchUpdate()"
      [disabled]="selectedTaskIds.length === 0 || loadingBatchUpdate"
      class="w-full md:w-auto flex justify-center py-3 px-6 border border-transparent rounded-lg shadow-lg text-lg font-semibold text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition duration-300 ease-in-out transform hover:scale-105"
    >
      <span *ngIf="!loadingBatchUpdate">Perform Batch Update ({{ selectedTaskIds.length }} tasks selected)</span>
      <span *ngIf="loadingBatchUpdate" class="flex items-center">
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Updating...
      </span>
    </button>
  </div>
</div>
